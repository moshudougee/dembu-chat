// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  password      String?   // For credentials provider
  googleId      String?   // For Google provider
  image         String?
  chatRoomIDs   String[]        @db.ObjectId
  accounts      Account[]
  sessions      Session[]
  messages      Message[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  chatRooms     ChatRoom[]      @relation("ChatRoomToUsers", fields: [chatRoomIDs], references: [id])
  createdRooms  ChatRoom[]      @relation("ChatRoomToCreator")
}
 
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 
model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}

model ChatRoom {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  description   String
  image         String?
  createdById   String    @db.ObjectId
  userIDs       String[]  @db.ObjectId
  messages      Message[]

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  users     User[]    @relation("ChatRoomToUsers", fields: [userIDs], references: [id])
  createdBy User      @relation("ChatRoomToCreator", fields: [createdById], references: [id])
}

model Message {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  content       String
  senderId      String    @db.ObjectId
  chatRoomId    String    @db.ObjectId

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  sender        User      @relation(fields: [senderId], references: [id])
  chatRoom      ChatRoom  @relation(fields: [chatRoomId], references: [id])
}
